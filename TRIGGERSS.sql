
USE FACTURADORBK;
	-- TRIGGERS CLIENTE
DROP TABLE IF EXISTS LOG_AUDITORIA_CLIENTES; -- BORRAMOS LA TABLA SI EXISTE
CREATE TABLE IF NOT EXISTS LOG_AUDITORIA_CLIENTES -- CREAMOS LA TABLA QUE SE VA A ENCARGAR DE LA AUDITORIA DE LOS CLIENTES
(
ID_LOG INT AUTO_INCREMENT PRIMARY KEY ,
NOMBRE_DE_ACCION VARCHAR (10),
NOMBRE_TABLA VARCHAR (50),
CAMPO_NUEVO VARCHAR (3200),
USUARIO VARCHAR (100),
FECHA_INSCRIPCION DATE
);
DROP TRIGGER IF EXISTS TRG_CLIENTES; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER // 
CREATE TRIGGER TRG_CLIENTES AFTER INSERT ON CLIENTEBK -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÃšES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_CLIENTES (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_NUEVO, USUARIO, FECHA_INSCRIPCION) -- ACA VA A INGRESAR LOS VALORES A LA TABLA DE AUDITORIA Y EL NUEVO CAMPO ES LO QUE VA A RESALTAR DEL CONTROL PARA PODER IDENTIFICAR EL CLIENTE EN LA LISTA
VALUES ('INSERT','CLIENTEBK', NEW.DNI ,CURRENT_USER(),NOW()); -- INGRESAMOS LOS DATOS A LA TABLA 
END // 

 
 DROP TABLE IF EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_P; -- BORRAMOS LA TABLA SI EXISTE
CREATE TABLE IF NOT EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_P -- CREAMOS LA TABLA QUE SE VA A ENCARGAR DE LA AUDITORIA DE LAS PROVINCIAS
(
ID_LOG_P INT AUTO_INCREMENT PRIMARY KEY ,
NOMBRE_DE_ACCION VARCHAR (10),
NOMBRE_TABLA VARCHAR (50),
CAMPO_VIEJO VARCHAR (3200),
CAMPO_NUEVO VARCHAR (3200),
USUARIO VARCHAR (100),
FECHA_INSCRIPCION DATE
); 

DROP TRIGGER IF EXISTS TRG_UPDATE_CLIENTES_P ; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER // 
CREATE TRIGGER TRG_UPDATE_CLIENTES_P BEFORE UPDATE ON CLIENTEBK -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LAS ACTUALIZACIONES DE LOS DATOS A LA TABLA CLIENTEBK EN CASO DE QUE EL CLIENTE SE MUDE DE PROVINCIA
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_CLIENTES_ACTUALIZACION_P (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, CAMPO_NUEVO, USUARIO, FECHA_INSCRIPCION)-- ACA VA A INGRESAR LOS VALORES A LA TABLA DE AUDITORIA DEL UPDATE DEL CLIENTE POR ESO GUARDAN LOS DATOS VIEJOS QUE ERA ANTES DEL UPDATE Y LOS DATOS NUEVOS QUE ES DESPUES DEL MISMO 
VALUES ('UPDATE','CLIENTEBK', OLD.PROVINCIA, NEW.PROVINCIA, CURRENT_USER(),NOW());
END //


 DROP TABLE IF EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_L; -- BORRAMOS LA TABLA SI EXISTE
CREATE TABLE IF NOT EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_L -- CREAMOS LA TABLA QUE SE VA A ENCARGAR DE LA AUDITORIA DE LAS LOCALIDADES
(
ID_LOG_L INT AUTO_INCREMENT PRIMARY KEY ,
NOMBRE_DE_ACCION VARCHAR (10),
NOMBRE_TABLA VARCHAR (50),
CAMPO_VIEJO VARCHAR (3200),
CAMPO_NUEVO VARCHAR (3200),
USUARIO VARCHAR (100),
FECHA_INSCRIPCION DATE
); 

DROP TRIGGER IF EXISTS TRG_UPDATE_CLIENTES_L ;-- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER // 
CREATE TRIGGER TRG_UPDATE_CLIENTES_L BEFORE UPDATE ON CLIENTEBK -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LAS ACTUALIZACIONES DE LOS DATOS A LA TABLA CLIENTEBK EN CASO DE QUE EL CLIENTE SE MUDE DE LOCALIDAD
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_CLIENTES_ACTUALIZACION_L (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, CAMPO_NUEVO, USUARIO, FECHA_INSCRIPCION) -- ACA VA A INGRESAR LOS VALORES A LA TABLA DE AUDITORIA DEL UPDATE DEL CLIENTE POR ESO GUARDAN LOS DATOS VIEJOS QUE ERA ANTES DEL UPDATE Y LOS DATOS NUEVOS QUE ES DESPUES DEL MISMO 
VALUES ('UPDATE','CLIENTEBK', OLD.LOCALIDAD, NEW.LOCALIDAD, CURRENT_USER(),NOW());
END //

 
 DROP TABLE IF EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_NOMBRE; -- BORRAMOS LA TABLA SI EXISTE
CREATE TABLE IF NOT EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_NOMBRE -- CREAMOS LA TABLA QUE SE VA A ENCARGAR DE LA AUDITORIA SI EL CLIENTE CAMBIA DE NOMBRE
(
ID_LOG_NOMBRE INT AUTO_INCREMENT PRIMARY KEY ,
NOMBRE_DE_ACCION VARCHAR (10),
NOMBRE_TABLA VARCHAR (50),
CAMPO_VIEJO VARCHAR (3200),
CAMPO_NUEVO VARCHAR (3200),
USUARIO VARCHAR (100),
FECHA_INSCRIPCION DATE
); 

DROP TRIGGER IF EXISTS TRG_UPDATE_CLIENTES_NOMBRE ; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER // 
CREATE TRIGGER TRG_UPDATE_CLIENTES_NOMBRE BEFORE UPDATE ON CLIENTEBK -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LAS ACTUALIZACIONES DE LOS DATOS A LA TABLA CLIENTEBK EN CASO DE QUE EL CLIENTE SE CAMBIE EL NOMBRE
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_CLIENTES_ACTUALIZACION_NOMBRE (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, CAMPO_NUEVO, USUARIO, FECHA_INSCRIPCION)-- ACA VA A INGRESAR LOS VALORES A LA TABLA DE AUDITORIA DEL UPDATE DEL CLIENTE POR ESO GUARDAN LOS DATOS VIEJOS QUE ERA ANTES DEL UPDATE Y LOS DATOS NUEVOS QUE ES DESPUES DEL MISMO 
VALUES ('UPDATE','CLIENTEBK', OLD.NOMBRE, NEW.NOMBRE, CURRENT_USER(),NOW());
END //

DROP TABLE IF EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_EMAIL; -- BORRAMOS LA TABLA SI EXISTE
CREATE TABLE IF NOT EXISTS LOG_AUDITORIA_CLIENTES_ACTUALIZACION_EMAIL -- CREAMOS LA TABLA QUE SE VA A ENCARGAR DE LA AUDITORIA DEL EMAIL DEL CLIENTE POR SI LO CAMBIA
ID_LOG_MAIL INT AUTO_INCREMENT PRIMARY KEY ,
NOMBRE_DE_ACCION VARCHAR (10),
NOMBRE_TABLA VARCHAR (50),
CAMPO_VIEJO VARCHAR (3200),
CAMPO_NUEVO VARCHAR (3200),
USUARIO VARCHAR (100),
FECHA_INSCRIPCION DATE
); 

DROP TRIGGER IF EXISTS TRG_UPDATE_CLIENTES_EMAIL ; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER // 
CREATE TRIGGER TRG_UPDATE_CLIENTES_EMAIL BEFORE UPDATE ON CLIENTEBK -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LAS ACTUALIZACIONES DE LOS DATOS A LA TABLA CLIENTEBK EN CASO DE QUE EL CLIENTE CAMBIE EL EMAIL
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_CLIENTES_ACTUALIZACION_EMAIL (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, CAMPO_NUEVO, USUARIO, FECHA_INSCRIPCION) -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LAS ACTUALIZACIONES DE LOS DATOS A LA TABLA CLIENTEBK EN CASO DE QUE EL CLIENTE CAMBIE EL EMAIL
VALUES ('UPDATE','CLIENTEBK', OLD.EMAIL, NEW.EMAIL, CURRENT_USER(),NOW());
END //



DROP TABLE IF EXISTS LOG_AUDITORIA_DELETE_CLIENTE; -- BORRAMOS LA TABLA SI EXISTE
CREATE TABLE IF NOT EXISTS LOG_AUDITORIA_DELETE_CLIENTE -- CREAMOS LA TABLA QUE SE VA A ENCARGAR DE LA AUDITORIA DEL EMAIL DEL CLIENTE POR SI SE ELIMINA
( 
ID_LOG_DEL INT AUTO_INCREMENT PRIMARY KEY ,
NOMBRE_DE_ACCION VARCHAR (10),
NOMBRE_TABLA VARCHAR (50),
CAMPO_VIEJO VARCHAR (3200),
USUARIO VARCHAR (100),
FECHA_INSCRIPCION DATE
); 

DROP TRIGGER IF EXISTS TRG_CLIENTES_DELETE;-- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER // 
CREATE TRIGGER TRG_CLIENTES_DELETE AFTER DELETE ON CLIENTEBK -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRAR ALGUN CLIENTE 
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_DELETE_CLIENTE (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, USUARIO, FECHA_INSCRIPCION) -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('DELETE','CLIENTEBK', OLD.ID_CLIENTE ,CURRENT_USER(),NOW());
END // 



SELECT * FROM CLIENTEBK;
SELECT * FROM LOG_AUDITORIA_CLIENTES;
SELECT * FROM LOG_AUDITORIA_CLIENTES_ACTUALIZACION_L;
SELECT * FROM LOG_AUDITORIA_CLIENTES_ACTUALIZACION_P;
SELECT * FROM LOG_AUDITORIA_CLIENTES_ACTUALIZACION_NOMBRE;
SELECT * FROM LOG_AUDITORIA_CLIENTES_ACTUALIZACION_EMAIL;
SELECT * FROM LOG_AUDITORIA_DELETE_CLIENTE ;

UPDATE CLIENTES SET NOMBRE = 'LUCIANO' WHERE ID_CLIENTE = 1 ;
UPDATE CLIENTES SET PROVINCIA = 'CORDOBA' WHERE ID_CLIENTE = 2 ;
UPDATE CLIENTES SET LOCALIDAD = 'VILLA MARIA' WHERE ID_CLIENTE = 3 ;
UPDATE CLIENTES SET EMAIL = 'AYALA.LUCIANO@MORON.GOB.AR' WHERE ID_CLIENTE =1 ;
DELETE FROM CLIENTES WHERE ID_CLIENTE = 5 ;
