DROP TABLE IF EXISTS Log_Clientes_Insert;
CREATE TABLE Log_Clientes_Insert 
(
  ID_Log_Cli_Ins int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_INSERT; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_INSERT AFTER INSERT ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_CLIENTES (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_NUEVO, USUARIO, FECHA_INSCRIPCION)
-- ACA VA A INGRESAR LOS VALORES A LA TABLA DE AUDITORIA Y EL NUEVO CAMPO ES LO QUE VA A RESALTAR DEL CONTROL PARA PODER IDENTIFICAR EL CLIENTE EN LA LISTA
VALUES ('INSERT','Cliente', NEW.Dni ,CURRENT_USER(),NOW()); -- INGRESAMOS LOS DATOS A LA TABLA 
END $$ 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Clientes_Delet;
CREATE TABLE Log_Clientes_Delet 
(
  ID_Log_Cli_Del int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_DELETE; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_DELETE AFTER DELETE ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO LOG_AUDITORIA_DELETE_CLIENTE (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('DELETE','Cliente', OLD.Dni ,CURRENT_USER(),NOW());
END$$ 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Clientes_Update_L;
CREATE TABLE Log_Clientes_Update_L 
(
  ID_Log_Cli_Loc int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_Update_L; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_Update_L AFTER UPDATE ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Clientes_Update_L (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Cliente', OLD.Localidad, NEW.Localidad ,CURRENT_USER(),NOW());
END$$
    

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Clientes_Update_P;
CREATE TABLE Log_Clientes_Update_P 
(
  ID_Log_Cli_Prov int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_Update_P; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_Update_P AFTER UPDATE ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Clientes_Update_P (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Cliente', OLD.Provincia, NEW.Provincia ,CURRENT_USER(),NOW());
END$$



-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Clientes_Update_A;
CREATE TABLE Log_Clientes_Update_A 
(
  ID_Log_Cli_Ape int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_Update_A; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_Update_A AFTER UPDATE ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Clientes_Update_A (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Cliente', OLD.Apellido, NEW.Apellido ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Clientes_Update_N;
CREATE TABLE Log_Clientes_Update_N 
(
  ID_Log_Cli_Nom int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_Update_N; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_Update_N AFTER UPDATE ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Clientes_Update_N (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Cliente', OLD.Nombre, NEW.Nombre ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Clientes_Update_M;
CREATE TABLE Log_Clientes_Update_M 
(
  ID_Log_Cli_Mail int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CLIENTES_Update_M; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CLIENTES_Update_M AFTER UPDATE ON Cliente -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Clientes_Update_M (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Cliente', OLD.Mail, NEW.Mail ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Provincias_Insert;
CREATE TABLE Log_Provincias_Insert 
(
  ID_Log_Prov int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Provincias_INS; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Provincias_INS AFTER INSERT ON Provincias -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Provincias_Insert (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('INSERT','Provincias', NEW.Provincia ,CURRENT_USER(),NOW());
END$$

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Localidad_Insert;
CREATE TABLE Log_Localidad_Insert 
(
  ID_Log_Loc int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Localidades_INS; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Localidades_INS AFTER INSERT ON Localidad -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Localidad_Insert (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('INSERT','Localidad', NEW.Localidad ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Direcciones_Insert;
CREATE TABLE Log_Direcciones_Insert 
(
  ID_Log_Dir int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Direcciones_INS; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Direcciones_INS AFTER INSERT ON Direcciones -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Direcciones_Insert (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('INSERT','Direcciones', NEW.Direccion ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Direcciones_Update;
CREATE TABLE Log_Direcciones_Update 
(
  ID_Log_Dir_Upd int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Direcciones_Update; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Direcciones_Update AFTER UPDATE ON Direcciones -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Direcciones_Update (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Direcciones', OLD.Direccion, NEW.Direccion ,CURRENT_USER(),NOW());
END$$

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_CP_Update;
CREATE TABLE Log_CP_Update 
(
  ID_Log_CP_Upd int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CP_Update; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CP_Update AFTER UPDATE ON Direcciones -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_CP_Update (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Direcciones', OLD.CP, NEW.CP ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_CP_Insert;
CREATE TABLE Log_CP_Insert 
(
  ID_Log_CP_Ins int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_CP_INS; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_CP_INS AFTER INSERT ON Direcciones -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_CP_Insert (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('INSERT','Direcciones', NEW.CP ,CURRENT_USER(),NOW());
END$$

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Productos_Insert;
CREATE TABLE Log_Productos_Insert 
(
  ID_Log_PD_Ins int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Productos_INS; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Productos_INS AFTER INSERT ON Productos -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Productos_Insert (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('INSERT','Productos', NEW.Serial_Number ,CURRENT_USER(),NOW());
 END$$

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Productos_Update;
CREATE TABLE Log_Productos_Update 
(
  ID_Log_PD_Upd int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Viejos varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Productos_Update; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Productos_Update AFTER UPDATE ON Productos -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Productos_Update (NOMBRE_DE_ACCION, NOMBRE_TABLA, CAMPO_VIEJO, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('UPDATE','Direcciones', OLD.Precio, NEW.Precio ,CURRENT_USER(),NOW());
END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Productos_Delet;
CREATE TABLE Log_Productos_Delet 
(
  ID_Log_PD_Ins int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Productos_DEL; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Productos_DEL AFTER DELETE ON Productos -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Productos_Delet (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('DELETE','Productos', OLD.Serial_Number ,CURRENT_USER(),NOW());
 END$$


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

DROP TABLE IF EXISTS Log_Cantidad_Insert;
CREATE TABLE Log_Cantidad_Insert 
(
  ID_Log_ST_Ins int (11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
  Nombre_Accion varchar (15) DEFAULT NULL,
  Nombre_Tabla varchar (50) DEFAULT NULL,
  Campo_Nuevo varchar (50) DEFAULT NULL,
  Usuario varchar (50) DEFAULT NULL,
  Fecha_Inscripcion date DEFAULT NULL
);
DROP TRIGGER IF EXISTS TRG_Cantidad_INS; -- ELIMINAMOS EL TRG SI ESTA CREADO
DELIMITER $$ 
CREATE TRIGGER TRG_Cantidad_INS AFTER INSERT ON Stock -- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL DE LO DATOS INGRESADOS A LA TABLA CLIENTEBK DESPÚES DE QUE SE HAGA
FOR EACH ROW 
BEGIN 
INSERT INTO Log_Cantidad_Insert (NOMBRE_DE_ACCION, NOMBRE_TABLA, Campo_Nuevo, USUARIO, FECHA_INSCRIPCION) 
-- CREAMOS EL TRG QUE SE VA A ENCARGAR DE LLEVAR UN CONTROL POR SI HAY QUE BORRA UN CLIENTE, LE VA A GUARDAR EL ID POR SI VUELVE DESPUES
VALUES ('INSERT','Stock', NEW.Cantidad ,CURRENT_USER(),NOW());
 END$$
